swirl()
library("swirl")
swirl()
map_chr(c(5, 3, 4), int_to_string)
map_lgl(c(1,2,3,4,5),gt(,b=3))
map_lgl(c(1,2,3,4,5),gt(b=3))
map_lgl(c(1,2,3,4,5),gt(3))
map_lgl(c(1,2,3,4,5),gt())
map_lgl(c(1,2,3,4,5),gt(a,3))
map_lgl(c(1,2,3,4,5),gt(c(1,2,3,4,5),3))
gt(c(1,2,3,4,5),3)
map_lgl(c(1,2,3,4,5),gt,b=3)
map_if(c(1,2,3,4,5),is_even,square)
map_if(c(1, 2, 3, 4), is_even, square)
map_at(c(4,6,2,3,8),c(1,3,4),square)
map2_chr(1:26,letters,paste)
map2_chr(letters,1:26,paste)
reduce(c(1,3,5,7),add_talk)
reduce(c("a", "b", "c", "d"),paste_talk)
reduce_right(c("a", "b", "c", "d"),paste_talk)
contains(random_ints,45)
detect(random_ints,is_even)
detect_index(random_ints,is_even)
keep(random_ints,is_even)
discard(random_ints,is_even)
every(random_ints,function(x){ x < 100 })
gt_10<-function(x){ if( x > 10){ return<-TRUE } else{ return <-false} }
gt_10 <- partial(gt,b=10)
gt_10(11)
walk(mark_antony)
walk(mark_antony,message)
q()
getwd()
library(dplyr)
library(readr)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
filename<-"C:/Users/Vishweshwaran/Downloads/data/accident_2013.csv"
fars_read(filename)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2017)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2017)
fars_read_years(17)
fars_read_years(2013)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(1,2013)
install.packages(map)
install.packages(maps)
"maps"
install.packages("maps")
fars_map_state(1,2013)
fars_map_state(01,2013)
fars_map_state(2,2013)
fars_map_state()
library(readr)
library(magrittr)
library(dplyr)
library(readr)
library(magrittr)
library(dplyr)
source("oop_code.R")
data <- read_csv("MIE.csv")
make_LD <- function(data){
attr_names <- c("id","visit","room","value","timepoint")
stopifnot(identical(attr_names,colnames(data)))
## sort the table by id
data[order(data$id,data$visit,data$room,data$timepoint,data$value),]
## Create the 'Longitudinal dataset' object
object <- list(id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
## Set the class name
class(object) <- "LongitudinalData"
object
}
x<-make_LD(x)
make_LD <- function(data){
attr_names <- c("id","visit","room","value","timepoint")
stopifnot(identical(attr_names,colnames(data)))
## sort the table by id
data[order(data$id,data$visit,data$room,data$timepoint,data$value),]
## Create the 'Longitudinal dataset' object
object <- list(id = data$id,
visit = data$visit,
room = data$room,
timepoint = data$timepoint,
value = data$value)
## Set the class name
class(object) <- "LongitudinalData"
object
}
x<-make_LD(x)
x<-make_LD(data)
print(class(x))
print(x)
unique(x$id)
LongitudinalData <- setRefClass("LongitudinalData",
fields=list(id="integer",visit="integer",room="character",value="numeric",timepoint="numeric"),
methods = list(make_LD <- function(x){ LongitudinalData$new(id=x$id,visit=x$visit,room=x$room,value=x$value,timepoint=x$timepoint)}))
x<-make_LD(data)
print(class(x))
print.LongitudinalData <- function(x){
cat("Longitudinal dataset with",length(unique(x$id)),"subjects")
invisible(x)
}
print(x)
print.LongitudinalData <- function(x){
cat("Longitudinal dataset with",length(unique(x$id)),"subjects")
}
print(x)
length(x$id)
for(i in 1:length(x:14)){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
for(i in 1:length(x$14)){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
visit <- setRefClass("visit",
fields = list(tot="numeric",rooms="list"),
methods = list(
get_tot = function(){
tot
},
get_rooms = function(){
rooms
},
tot_rooms = function(){
length(rooms)
},
add_room = function(x){
name <- x$get_name()
time <- x$get_times()
val<- x$get_values()
pos <- match_room(name)
if(pos>0){
rooms[[pos]]$add_time(time)
rooms[[pos]]$add_value(val)
}else{
rooms[[length(rooms)+1]] <<- x
}
},
match_room = function(x){
if(tot_rooms()){
for(i in 1:tot_rooms()){
if(rooms[[i]]$get_name()==x)
return (i)
}}
return (0)
}
)
)
data <- read_csv("MIE.csv")
## create the Longitudinal dataset object
make_LD <- function(data){
attr_names <- c("id","visit","room","value","timepoint")
stopifnot(identical(attr_names,colnames(data)))
## sort the table by id
data[order(data$id,data$visit,data$room,data$timepoint,data$value),]
## Create the 'Longitudinal dataset' object
object <- list(id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
## Set the class name
class(object) <- "LongitudinalData"
object
}
print.LongitudinalData <- function(x){
cat("Longitudinal dataset with",length(unique(x$id)),"subjects")
invisible(x)
}
is_id.LongitudinalData <- function(x,v){
is.element(v,unique(x$id))
}
get_id.LongitudinalData <- function(x){
unique(x$id)
}
nobs.LongitudinalData <- function(x){
length(x$id)
}
subjects.longitudinalData <- function(x){
ids <- get_id.LongitudinalData(x)
len <- length(ids)
subjs <- list()
## inizialise subject objects id
for(i in 1:len){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
## adding observations to subject objects
obs <- nobs.LongitudinalData(x)
for(i in 1:obs){
id <- x$id[i]
vis <- x$visit[i]
roo <- x$room[i]
tim <- x$timepoint[i]
val <- x$value[i]
pos <- match(id,ids)
## add a new observation to the subject object
visit <- subjs[[pos]]$get_visits(vis+1)
r <- room(name=roo,times=tim,values=val)
visit$add_room(r)
}
subjs
}
room <- setRefClass("room",
fields  = list(name="character",times="numeric",values="numeric"),
methods = list(
get_name = function(){
name
},
get_times = function(){
times
},
get_values = function(){
values
},
add_time = function(x){
times <<- c(times,x)
},
add_value = function(x){
values <<- c(values,x)
}
)
)
visit <- setRefClass("visit",
fields = list(tot="numeric",rooms="list"),
methods = list(
get_tot = function(){
tot
},
get_rooms = function(){
rooms
},
tot_rooms = function(){
length(rooms)
},
add_room = function(x){
name <- x$get_name()
time <- x$get_times()
val<- x$get_values()
pos <- match_room(name)
if(pos>0){
rooms[[pos]]$add_time(time)
rooms[[pos]]$add_value(val)
}else{
rooms[[length(rooms)+1]] <<- x
}
},
match_room = function(x){
if(tot_rooms()){
for(i in 1:tot_rooms()){
if(rooms[[i]]$get_name()==x)
return (i)
}}
return (0)
}
)
)
subject <- setRefClass("subject",
fields = list(id="numeric",visits="list"),
methods = list(
get_id = function(){
id
},
get_visits = function(n){
visits[[n]]
},
tot_visits = function(){
length(visits)
},
add_visit = function(x){
visits[[length(visits)+1]] <<- x
}
)
)
subject <- function(x,n){
if(!is_id.LongitudinalData(x,n))
return(subject(id=0,visit=list()))
else{
return(n)
}
}
subject(x,14)
subject(x,14) %>% summary
out <- subject(x,14) %>% summary
print(out)
subjects.longitudinalData
subjects.longitudinalData(x)
subjects.longitudinalData(14)
subjects.longitudinalData(x,14)
nobs.LongitudinalData <- function(x,id){
length(x$id)
}
nobs.LongitudinalData(x,14)
is_id.LongitudinalData <- function(x,v,id){
is.element(v,unique(x$id))
}
get_id.LongitudinalData <- function(x,id){
unique(x$id)
}
nobs.LongitudinalData <- function(x,id){
length(x$id)
}
subjects.longitudinalData <- function(x,id){
ids <- get_id.LongitudinalData(x,id)
len <- length(x,id)
subjs <- list()
## inizialise subject objects id
for(i in 1:len){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
## adding observations to subject objects
obs <- nobs.LongitudinalData(x)
for(i in 1:obs){
id <- x$id[i]
vis <- x$visit[i]
roo <- x$room[i]
tim <- x$timepoint[i]
val <- x$value[i]
pos <- match(id,ids)
## add a new observation to the subject object
visit <- subjs[[pos]]$get_visits(vis+1)
r <- room(name=roo,times=tim,values=val)
visit$add_room(r)
}
subjs
}
subjects.longitudinalData(x,14)
subjects.longitudinalData <- function(x,id){
ids <- get_id.LongitudinalData(x,id)
len <- length(x,id)
subjs <- list()
## inizialise subject objects id
for(i in 1:len){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
## adding observations to subject objects
obs <- nobs.LongitudinalData(x)
for(i in 1:obs){
id <- x$id[i]
vis <- x$visit[i]
roo <- x$room[i]
tim <- x$timepoint[i]
val <- x$value[i]
pos <- match(id,ids)
## add a new observation to the subject object
visit <- subjs[[pos]]$get_visits(vis+1)
r <- room(name=roo,times=tim,values=val)
visit$add_room(r)
}
subjs
}
subjects.longitudinalData(x,14)
subjects.longitudinalData <- function(x,id){
ids <- get_id.LongitudinalData(x,id)
len <- length(ids)
subjs <- list()
## inizialise subject objects id
for(i in 1:len){
s <- subject(id=ids[i],visits=list(visit(tot=0,rooms=list()),visit(tot=1,rooms=list()),visit(tot=2,rooms=list())))
subjs[[length(subjs)+1]] <- s
}
## adding observations to subject objects
obs <- nobs.LongitudinalData(x)
for(i in 1:obs){
id <- x$id[i]
vis <- x$visit[i]
roo <- x$room[i]
tim <- x$timepoint[i]
val <- x$value[i]
pos <- match(id,ids)
## add a new observation to the subject object
visit <- subjs[[pos]]$get_visits(vis+1)
r <- room(name=roo,times=tim,values=val)
visit$add_room(r)
}
subjs
}
subjects.longitudinalData(x,14)
setwd("C:\\Users\\Vishweshwaran")
setwd("C:\\Users\\Vishweshwaran\\Documents\\RepData_PeerAssessment1/")
list.files
list.files()
#Load File
data <- read.csv("activity.zip", header = T, sep = ",")
data
unzip("activity.zip")
data <- read.csv("activity.csv", header = T, sep = ",")
data
#Load File
unzip("activity.zip")
data <- read.csv("activity.csv", header = T, sep = ",")
#Calulate no of steps per day
sum_of_steps <- tapply(data$steps, data$date, sum, na.rm=T)
#Plot sum of steps per day
hist(sum_of_steps,breaks = 10, col=5,xlab = "sum of steps per day", main = "histogram of steps per day")
#Find mean and median
mean_sum_of_steps <- mean(sum_of_steps)
median_sum_of_steps <- median(sum_of_steps)
#Print mean and median
print(c("mean of the total number of steps taken per daymean is:",mean_sum_of_steps, "median of the total number of steps taken per day is:",median_sum_of_steps))
#Calulate mean no of steps for interval
min_int <- tapply(data$steps, data$interval, mean, na.rm=T)
#Plot Interval Vs Average no of steps
plot(min_int ~ unique(data$interval), col=2,type="l", xlab = "5 mins interval",ylab="Average no of steps")
#Find interval with max no of steps
max_no_of_steps_int<-min_int[which.max(min_int)]
#Print interval with max no of steps and Average no of steps
print(c("5 minute interval with max no of steps: ","No of steps:",max_no_of_steps_int))
#Find missing values
step_missing_values<-sum(is.na(data$steps))
date_missing_values<-sum(is.na(data$date))
interval_missing_values<-sum(is.na(data$interval))
#Print Summary of missing values
print(c("step missing values:",step_missing_values,"date missing values:",date_missing_values,"interval missing values:",interval_missing_values))
#Impute NA values
data1 <- data
for (i in 1:nrow(data)){
if(is.na(data$steps[i])){
data1$steps[i]<- min_int[[as.character(data[i, "interval"])]]
}
}
sum_of_steps1 <- tapply(data1$steps, data1$date, sum, na.rm=T)
hist(sum_of_steps1,breaks = 10, col=5,xlab = "sum of steps per day", main = "histogram of steps per day")
#Find mean and median
mean_sum_of_steps1 <- mean(sum_of_steps1)
median_sum_of_steps1 <- median(sum_of_steps1)
#Print mean and median
print(c("mean of the total number of steps taken per daymean is:",mean_sum_of_steps1, "median of the total number of steps taken per day is:",median_sum_of_steps1))
#Observation
#We can observe that both mean and median of imputed data are higher than the mean and median of raw data, suprisingly mean and median for the imputed data is same.
#Convert date from factor to date
data1$date<-as.Date(data1$date)
#Creating a factor variable "day "to store the day of the week:
data1$day <- as.factor(weekdays(data1$date))
#Create logical variable "weekday" (weekday=TRUE, weekend = FALE) :
data1$weekday <- ifelse(!(data1$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Average number of steps for weekdays
weekdays_data <- data1[data1$weekday,]
steps_per_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Average number of steps for weekends
weekends_data <- data1[!data1$weekday,]
steps_per_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Add columns names
colnames(steps_per_interval_weekdays) <- c("interval", "average_steps")
colnames(steps_per_interval_weekends) <- c("interval", "average_steps")
#Adding a column to indecate the day
steps_per_interval_weekdays$day <- "Weekday"
steps_per_interval_weekends$day <- "Weekend"
#Merging the two day types together
week_data <- rbind(steps_per_interval_weekends, steps_per_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Plotting the data
library(lattice)
xyplot(average_steps ~  interval | day, data = week_data, col=3,layout = c(1,2), type ="l", ylab="Number of Steps")
